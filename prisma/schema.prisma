generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the Team model
model Team {
  id             String       @id @default(uuid())
  name           String
  description    String
  link           String
  members        Member[]
  creator        Member       @relation("TeamCreator", fields: [creatorAddress], references: [walletAddress])
  creatorAddress String
  Submission     Submission[]
}

// Define the Project model
model Project {
  id                  String       @id @default(uuid())
  title               String
  description         String
  email               String
  phone               String
  bounties            Bounty[]
  bountyIDs           String[]
  quotePrice          Int          @default(0)
  stage               ProjectStage @default(PendingBountyMgrQuote)
  founder             Member       @relation(fields: [memberWalletAddress], references: [walletAddress])
  memberWalletAddress String
}

// Define the Bounty model
model Bounty {
  id                  String       @id @default(uuid())
  title               String
  description         String
  postDate            DateTime
  types               BountyType[]
  deadline            DateTime
  participantsTeamIDs String[]
  testCases           String[]
  stage               BountyStage  @default(Draft)
  submissions         Submission[] @relation("Submission")
  aboutProject        String?
  headerSections      Json?

  winningSubmission   Submission? @relation("WinningSubmission", fields: [winningSubmissionId], references: [id])
  winningSubmissionId String?     @unique

  approvedByFounder   Boolean @default(false)
  approvedByManager   Boolean @default(false)
  approvedByValidator Boolean @default(false)

  reward         Int            @default(0)
  founder        Member?        @relation("FounderBounty", fields: [founderAddress], references: [walletAddress])
  founderAddress String?
  project        Project?       @relation(fields: [projectId], references: [id])
  projectId      String?
  BountyWinner   BountyWinner[]
}

model Submission {
  id        String     @id @default(uuid())
  videoDemo String
  repo      String
  createdAt DateTime   @default(now())
  testCases TestCase[]
  bounty    Bounty     @relation("Submission", fields: [bountyId], references: [id])
  bountyId  String
  team      Team       @relation(fields: [teamId], references: [id])
  teamId    String

  winningSubmission Bounty? @relation("WinningSubmission")
}

model TestCase {
  id           String      @id @default(uuid())
  text         String
  approved     Boolean     @default(false)
  submission   Submission? @relation(fields: [submissionId], references: [id])
  submissionId String?
}

// Define the Member model
model Member {
  username         String
  firstName        String
  lastName         String
  walletAddress    String         @id @unique
  email            String
  bio              String
  level            Int            @default(0)
  roles            RoleType[]
  playingRole      RoleType
  bountiesWon      Int
  teamsJoined      String[]
  membersInvited   Int
  completedWelcome Boolean
  teamInvites      TeamInvite[]
  bounties         Bounty[]       @relation("FounderBounty")
  createdTeams     Team[]         @relation("TeamCreator")
  teams            Team[]
  Project          Project[]
  BountyWinner     BountyWinner[]
}

model BountyWinner {
  id            String  @id @default(uuid())
  bounty        Bounty  @relation(fields: [bountyId], references: [id])
  bountyId      String  @unique
  confirmed     Boolean @default(false)
  submissionId  String  @unique
  // Team creator
  member        Member  @relation(fields: [memberAddress], references: [walletAddress])
  memberAddress String

  approvedByFounder Boolean @default(false)
  approvedByManager Boolean @default(false)
}

// Define the TeamInvite model
model TeamInvite {
  id            String  @id @default(uuid())
  fromAddress   String
  fromName      String
  toTeamId      String
  toTeamName    String
  member        Member? @relation(fields: [memberAddress], references: [walletAddress])
  memberAddress String?
}

// Define the enums
enum ProjectStage {
  PendingBountyMgrQuote
  PendingFounderPay
  PendingBountyDesign
  PendingBountyValidator
  PendingApproval
  Declined
  Ready
}

enum BountyType {
  Frontend
  Backend
  Fullstack
  Web3
}

enum BountyStage {
  Active
  Draft
  PendingApproval
  Completed
}

enum RoleType {
  Founder
  BountyHunter
  BountyManager
  BountyDesigner
  BountyValidator
}
